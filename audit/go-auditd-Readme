# go-audit Integration for Ubuntu Server Security Project

This documentation explains how to install, configure, and use `go-audit` as a replacement for the traditional `auditd` service on Ubuntu Server.

##  Overview

`go-audit` is a lightweight, high-performance audit daemon written in Go. It connects directly to the Linux kernel's audit subsystem via netlink and processes audit events in real time. The tool outputs structured JSON logs, enabling easy integration with modern SIEM platforms such as ELK Stack, Graylog, or Splunk.

In this project, we use `go-audit` to:

* Monitor sensitive system calls (e.g. `execve`, `connect`, `open`)
* Track unauthorized access attempts to critical files
* Collect structured logs for external analysis
* Replace `auditd` with a faster and more maintainable alternative

---

##  Features

* JSON output for better readability and SIEM integration
* Written in Go — safe and performant
* Tracks missing audit events via sequence monitoring
* Supports Docker and cgroup metadata tagging
* Flexible output options: file, syslog, stdout, GELF

---

## Requirements

| Component    | Minimum Version                    |
| ------------ | ---------------------------------- |
| OS           | Ubuntu Server 20.04+               |
| Kernel       | Linux with audit subsystem enabled |
| Go           | v1.14+ (for building from source)  |
| auditd tools | auditctl (for rule management)     |
| Privileges   | root access required               |

---

##  Installation Steps (Build from Source)

### Step 1: Install dependencies

```bash
sudo apt update && \
  sudo apt install -y golang make auditd
```

### Step 2: Clone and build the project

```bash
git clone https://github.com/slackhq/go-audit.git
cd go-audit
make
```

### Step 3: Move the binary

```bash
sudo cp go-audit /usr/local/bin/
sudo chown root:root /usr/local/bin/go-audit
```

### Step 4: Prepare configuration

Create a YAML file at `/etc/go-audit.yaml`. Here's an enhanced and security-hardened example:

```yaml
socket_buffer:
  receive: 16384

output:
  syslog:
    enabled: true

rules:
  # Increase audit queue depth
  - -b 8192

  # Monitor execution of all binaries
  - -a always,exit -F arch=b64 -S execve -k exec_log

  # Monitor access to critical user and auth files
  - -a always,exit -F arch=b64 -S open,openat -F dir=/etc -F path=passwd -F perm=wa -k etc_passwd
  - -a always,exit -F arch=b64 -S open,openat -F dir=/etc -F path=shadow -F perm=wa -k etc_shadow
  - -a always,exit -F arch=b64 -S open,openat -F dir=/etc -F path=sudoers -F perm=wa -k etc_sudoers

  # Monitor failed file access (unauthorized attempts)
  - -a exit,always -F arch=b64 -S open,openat -F exit=-EACCES -k denied_access
  - -a exit,always -F arch=b64 -S open,openat -F exit=-EPERM -k denied_access

  # Monitor permission and ownership changes
  - -a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -k perm_mod
  - -a always,exit -F arch=b64 -S chown,fchown,fchownat -k owner_mod

  # Monitor process attachment (debugging or injection)
  - -a always,exit -F arch=b64 -S ptrace -F a0=16 -k ptrace_attach

  # Monitor module loading and unloading
  - -a always,exit -F arch=b64 -S init_module,delete_module -k kernel_mod

  # Monitor system networking syscalls
  - -a always,exit -F arch=b64 -S connect -k net_out
  - -a always,exit -F arch=b64 -S accept,listen,bind -k net_in

  # Monitor cron job modifications
  - -w /etc/crontab -p wa -k crontab_mod
  - -w /etc/cron.d/ -p wa -k cron_d_mod

  # Enable auditing if disabled
  - -e 1
```

### Explanation of Rules:

* **`execve` syscall**: Tracks all executed programs on the system.
* **`open,openat` with path filters**: Tracks read/write access to sensitive files.
* **Permission Denied logs**: Useful for detecting brute-force or misconfigured scripts.
* **`chmod, chown` syscalls**: Track changes in file permissions or ownership.
* **`ptrace` syscall**: Detects attempts to debug or hijack other processes.
* **`init_module, delete_module`**: Kernel module loading — very sensitive.
* **`connect, bind, listen`**: Network activity monitoring.
* **`cron` watches**: Modification of scheduled jobs.

---

## ⚙ Systemd Service Setup

Create the unit file `/etc/systemd/system/go-audit.service`:

```ini
[Unit]
Description=go-audit daemon for Linux audit
After=network.target auditd.service
Conflicts=auditd.service

[Service]
ExecStart=/usr/local/bin/go-audit -config /etc/go-audit.yaml
Restart=on-failure

[Install]
WantedBy=multi-user.target
```

Enable and start the service:

```bash
sudo systemctl daemon-reload
sudo systemctl disable --now auditd.service
sudo systemctl enable --now go-audit.service
```

---

##  Directory Structure Suggestion

```
auditd/
└── go-audit/
    ├── go-audit.yaml
    ├── go-audit.service
    ├── README.md  <-- this file
    └── logrotate.conf
```

---

##  Next Steps

* [ ] Add integration with rsyslog or filebeat
* [ ] Create `.deb` package for automated installation
* [ ] Document advanced rules for critical paths and kernel integrity

---

##  Notes

* `go-audit` must not run in parallel with `auditd`. Stop and disable `auditd` before launching `go-audit`.
* You can monitor the logs via `journalctl -u go-audit` or `/var/log/syslog`.
* Use `auditctl -l` to verify active rules.

---

For more details, refer to: [https://github.com/slackhq/go-audit](https://github.com/slackhq/go-audit)
