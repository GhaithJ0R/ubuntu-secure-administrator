# go-audit Integration for Ubuntu Server Security Project

This documentation explains how to install, configure, and use `go-audit` as a replacement for the traditional `auditd` service on Ubuntu Server.

## üìå Overview

`go-audit` is a lightweight, high-performance audit daemon written in Go. It connects directly to the Linux kernel's audit subsystem via netlink and processes audit events in real time. The tool outputs structured JSON logs, enabling easy integration with modern SIEM platforms such as Graylog.

In this project, we use `go-audit` to:

* Monitor sensitive system calls (e.g. `execve`, `connect`, `open`)
* Track unauthorized access attempts to critical files
* Collect structured logs for external analysis
* Replace `auditd` with a faster and more maintainable alternative

---

## ‚úÖ Features

* JSON output for better readability and SIEM integration
* Written in Go ‚Äî safe and performant
* Tracks missing audit events via sequence monitoring
* Supports Docker and cgroup metadata tagging
* Flexible output options: file, syslog, stdout, GELF

---

## üë• Recommended Deployment: SMB/Enterprise with 15‚Äì20 Nodes

For companies managing 15 to 20 Linux systems (e.g. developers, backend services, office workstations), we recommend the following:

* **Install `go-audit` on every node** as a local audit log agent
* **Centralize logs using Graylog**
* Use a common ruleset (see `go-audit.rules.yaml`) deployed via Ansible
* Integrate with Graylog streams, dashboards, and alerts
* Use rsyslog or Filebeat to ship logs to the Graylog server

Advantages:

* Lightweight agent with minimal CPU impact
* Strong syscall coverage
* Easy to scale and replicate
* Central search and alerting with structured JSON logs

---

## üöß Requirements

| Component    | Minimum Version                    |
| ------------ | ---------------------------------- |
| OS           | Ubuntu Server 20.04+               |
| Kernel       | Linux with audit subsystem enabled |
| Go           | v1.14+ (for building from source)  |
| auditd tools | auditctl (for rule management)     |
| Privileges   | root access required               |

---

## üõ†Ô∏è Installation Steps (Build from Source)

### Step 1: Install dependencies

```bash
sudo apt update && \
  sudo apt install -y golang make auditd
```

### Step 2: Clone and build the project

```bash
git clone https://github.com/slackhq/go-audit.git
cd go-audit
make
```

### Step 3: Move the binary

```bash
sudo cp go-audit /usr/local/bin/
sudo chown root:root /usr/local/bin/go-audit
```

### Step 4: Prepare configuration

Create a YAML file at `/etc/go-audit.yaml`. Use a rules file like `go-audit.rules.yaml`:

```yaml
socket_buffer:
  receive: 16384

output:
  syslog:
    enabled: true

include_rules_file: /etc/go-audit.rules.yaml
```

Then create `/etc/go-audit.rules.yaml` with your syscall rules (see external file).

---

## ‚öôÔ∏è Systemd Service Setup

Create the unit file `/etc/systemd/system/go-audit.service`:

```ini
[Unit]
Description=go-audit daemon for Linux audit
After=network.target auditd.service
Conflicts=auditd.service

[Service]
ExecStart=/usr/local/bin/go-audit -config /etc/go-audit.yaml
Restart=on-failure

[Install]
WantedBy=multi-user.target
```

Enable and start the service:

```bash
sudo systemctl daemon-reload
sudo systemctl disable --now auditd.service
sudo systemctl enable --now go-audit.service
```

---

## üìÇ Directory Structure Suggestion

```
auditd/
‚îî‚îÄ‚îÄ go-audit/
    ‚îú‚îÄ‚îÄ go-audit.yaml
    ‚îú‚îÄ‚îÄ go-audit.rules.yaml  <-- rules moved here
    ‚îú‚îÄ‚îÄ go-audit.service
    ‚îú‚îÄ‚îÄ README.md  <-- this file
    ‚îî‚îÄ‚îÄ logrotate.conf
```

---

## üîó Integration with Graylog

To integrate `go-audit` with Graylog, follow these steps:

### Step 1: Install and Configure Graylog

Refer to the official documentation to install Graylog on Ubuntu:
[https://docs.graylog.org/en/latest/pages/installation.html](https://docs.graylog.org/en/latest/pages/installation.html)

### Step 2: Configure Input in Graylog

* Log in to the Graylog web interface (default http\://<ip>:9000)
* Go to **System ‚Üí Inputs**
* Select **Syslog UDP** or **GELF UDP**
* Bind to port `514` or `12201`
* Start the input

### Step 3: Configure rsyslog or Filebeat on Clients

Configure `/etc/rsyslog.d/90-go-audit.conf`:

```bash
*.* @graylog_ip:514
```

Restart rsyslog:

```bash
sudo systemctl restart rsyslog
```

---

## üöÄ Automate Deployment with Ansible

Use Ansible to automate deployment across multiple servers.

### Step 1: Install Ansible

```bash
sudo apt install -y ansible
```

### Step 2: Create Ansible Playbook

* Create an inventory file `inventory.ini` listing all your servers:

```ini
[audit_nodes]
192.168.1.10
192.168.1.11
```

* Create a playbook `deploy-go-audit.yaml`:

```yaml
- hosts: audit_nodes
  become: yes
  tasks:
    - name: Install dependencies
      apt:
        name: [golang, make, auditd]
        state: present
        update_cache: yes

    - name: Copy go-audit files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - { src: './go-audit', dest: '/usr/local/bin/go-audit' }
        - { src: './go-audit.yaml', dest: '/etc/go-audit.yaml' }
        - { src: './go-audit.rules.yaml', dest: '/etc/go-audit.rules.yaml' }
        - { src: './go-audit.service', dest: '/etc/systemd/system/go-audit.service' }

    - name: Start and enable service
      systemd:
        name: go-audit
        state: started
        enabled: yes
        daemon_reload: yes
```

Run the playbook:

```bash
ansible-playbook -i inventory.ini deploy-go-audit.yaml
```

---

For more details, refer to: [https://github.com/slackhq/go-audit](https://github.com/slackhq/go-audit)
